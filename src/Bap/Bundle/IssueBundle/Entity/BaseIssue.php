<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.5-dev (doctrine2-annotation) on 2015-01-20 12:50:59.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Bap\Bundle\IssueBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * Bap\Bundle\IssueBundle\Entity\Issue
 *
 * @ORM\Entity(repositoryClass="Entity\Repository\IssueRepository")
 * @ORM\Table(name="bap_issue", indexes={@ORM\Index(name="index2", columns={"summary"}), @ORM\Index(name="index3", columns={"code"}), @ORM\Index(name="index4", columns={"description"}), @ORM\Index(name="index5", columns={"`type`"}), @ORM\Index(name="index6", columns={"priority"}), @ORM\Index(name="index7", columns={"`status`"}), @ORM\Index(name="index8", columns={"tags_id"}), @ORM\Index(name="index9", columns={"reporter_id"}), @ORM\Index(name="index10", columns={"parent_id"}), @ORM\Index(name="index12", columns={"resolution"}), @ORM\Index(name="index13", columns={"assignee_id"})})
 * @ORM\InheritanceType("SINGLE_TABLE")
 * @ORM\DiscriminatorColumn(name="discr", type="string")
 * @ORM\DiscriminatorMap({"base"="BaseIssue", "extended"="Issue"})
 */
class BaseIssue
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $parent_id;

    /**
     * @ORM\Column(type="integer")
     */
    protected $reporter_id;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $assignee_id;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $tags_id;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $code;

    /**
     * @ORM\Column(name="`status`", type="string", length=32)
     */
    protected $status;

    /**
     * @ORM\Column(name="`type`", type="string", length=32)
     */
    protected $type;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $summary;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $description;

    /**
     * @ORM\Column(type="string", length=32)
     */
    protected $priority;

    /**
     * @ORM\Column(type="string", length=32)
     */
    protected $resolution;

    /**
     * @ORM\Column(type="datetime")
     */
    protected $created_at;

    /**
     * @ORM\Column(type="datetime")
     */
    protected $updated_at;

    /**
     * @ORM\OneToMany(targetEntity="IssueCollaborator", mappedBy="issue")
     * @ORM\JoinColumn(name="id", referencedColumnName="issue_id")
     */
    protected $issueCollaborators;

    /**
     * @ORM\OneToMany(targetEntity="IssueCollabortator", mappedBy="issue")
     * @ORM\JoinColumn(name="id", referencedColumnName="issue_id", onDelete="CASCADE")
     */
    protected $issueCollabortators;

    /**
     * @ORM\OneToMany(targetEntity="IssueRelation", mappedBy="issueRelatedByIssueId")
     * @ORM\JoinColumn(name="id", referencedColumnName="issue_id", onDelete="CASCADE")
     */
    protected $issueRelationRelatedByIssueIds;

    /**
     * @ORM\OneToMany(targetEntity="IssueRelation", mappedBy="issueRelatedByRelatedIssueId")
     * @ORM\JoinColumn(name="id", referencedColumnName="related_issue_id", onDelete="CASCADE")
     */
    protected $issueRelationRelatedByRelatedIssueIds;

    /**
     * @ORM\ManyToOne(targetEntity="IssueType", inversedBy="issues")
     * @ORM\JoinColumn(name="`type`", referencedColumnName="`value`")
     */
    protected $issueType;

    /**
     * @ORM\ManyToOne(targetEntity="IssuePriority", inversedBy="issues")
     * @ORM\JoinColumn(name="priority", referencedColumnName="`value`")
     */
    protected $issuePriority;

    /**
     * @ORM\ManyToOne(targetEntity="IssueResolution", inversedBy="issues")
     * @ORM\JoinColumn(name="resolution", referencedColumnName="`value`")
     */
    protected $issueResolution;

    public function __construct()
    {
        $this->issueCollaborators = new ArrayCollection();
        $this->issueCollabortators = new ArrayCollection();
        $this->issueRelationRelatedByIssueIds = new ArrayCollection();
        $this->issueRelationRelatedByRelatedIssueIds = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of parent_id.
     *
     * @param integer $parent_id
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function setParentId($parent_id)
    {
        $this->parent_id = $parent_id;

        return $this;
    }

    /**
     * Get the value of parent_id.
     *
     * @return integer
     */
    public function getParentId()
    {
        return $this->parent_id;
    }

    /**
     * Set the value of reporter_id.
     *
     * @param integer $reporter_id
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function setReporterId($reporter_id)
    {
        $this->reporter_id = $reporter_id;

        return $this;
    }

    /**
     * Get the value of reporter_id.
     *
     * @return integer
     */
    public function getReporterId()
    {
        return $this->reporter_id;
    }

    /**
     * Set the value of assignee_id.
     *
     * @param integer $assignee_id
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function setAssigneeId($assignee_id)
    {
        $this->assignee_id = $assignee_id;

        return $this;
    }

    /**
     * Get the value of assignee_id.
     *
     * @return integer
     */
    public function getAssigneeId()
    {
        return $this->assignee_id;
    }

    /**
     * Set the value of tags_id.
     *
     * @param integer $tags_id
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function setTagsId($tags_id)
    {
        $this->tags_id = $tags_id;

        return $this;
    }

    /**
     * Get the value of tags_id.
     *
     * @return integer
     */
    public function getTagsId()
    {
        return $this->tags_id;
    }

    /**
     * Set the value of code.
     *
     * @param string $code
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function setCode($code)
    {
        $this->code = $code;

        return $this;
    }

    /**
     * Get the value of code.
     *
     * @return string
     */
    public function getCode()
    {
        return $this->code;
    }

    /**
     * Set the value of status.
     *
     * @param string $status
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get the value of status.
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set the value of type.
     *
     * @param string $type
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function setType($type)
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Get the value of type.
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set the value of summary.
     *
     * @param string $summary
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function setSummary($summary)
    {
        $this->summary = $summary;

        return $this;
    }

    /**
     * Get the value of summary.
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->summary;
    }

    /**
     * Set the value of description.
     *
     * @param string $description
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function setDescription($description)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Get the value of description.
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set the value of priority.
     *
     * @param string $priority
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function setPriority($priority)
    {
        $this->priority = $priority;

        return $this;
    }

    /**
     * Get the value of priority.
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->priority;
    }

    /**
     * Set the value of resolution.
     *
     * @param string $resolution
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function setResolution($resolution)
    {
        $this->resolution = $resolution;

        return $this;
    }

    /**
     * Get the value of resolution.
     *
     * @return string
     */
    public function getResolution()
    {
        return $this->resolution;
    }

    /**
     * Set the value of created_at.
     *
     * @param datetime $created_at
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function setCreatedAt($created_at)
    {
        $this->created_at = $created_at;

        return $this;
    }

    /**
     * Get the value of created_at.
     *
     * @return datetime
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }

    /**
     * Set the value of updated_at.
     *
     * @param datetime $updated_at
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function setUpdatedAt($updated_at)
    {
        $this->updated_at = $updated_at;

        return $this;
    }

    /**
     * Get the value of updated_at.
     *
     * @return datetime
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }

    /**
     * Add IssueCollaborator entity to collection (one to many).
     *
     * @param \Bap\Bundle\IssueBundle\Entity\IssueCollaborator $issueCollaborator
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function addIssueCollaborator(IssueCollaborator $issueCollaborator)
    {
        $this->issueCollaborators[] = $issueCollaborator;

        return $this;
    }

    /**
     * Remove IssueCollaborator entity from collection (one to many).
     *
     * @param \Bap\Bundle\IssueBundle\Entity\IssueCollaborator $issueCollaborator
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function removeIssueCollaborator(IssueCollaborator $issueCollaborator)
    {
        $this->issueCollaborators->removeElement($issueCollaborator);

        return $this;
    }

    /**
     * Get IssueCollaborator entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getIssueCollaborators()
    {
        return $this->issueCollaborators;
    }

    /**
     * Add IssueCollabortator entity to collection (one to many).
     *
     * @param \Bap\Bundle\IssueBundle\Entity\IssueCollabortator $issueCollabortator
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function addIssueCollabortator(IssueCollabortator $issueCollabortator)
    {
        $this->issueCollabortators[] = $issueCollabortator;

        return $this;
    }

    /**
     * Remove IssueCollabortator entity from collection (one to many).
     *
     * @param \Bap\Bundle\IssueBundle\Entity\IssueCollabortator $issueCollabortator
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function removeIssueCollabortator(IssueCollabortator $issueCollabortator)
    {
        $this->issueCollabortators->removeElement($issueCollabortator);

        return $this;
    }

    /**
     * Get IssueCollabortator entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getIssueCollabortators()
    {
        return $this->issueCollabortators;
    }

    /**
     * Add IssueRelation entity related by `issue_id` to collection (one to many).
     *
     * @param \Bap\Bundle\IssueBundle\Entity\IssueRelation $issueRelation
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function addIssueRelationRelatedByIssueId(IssueRelation $issueRelation)
    {
        $this->issueRelationRelatedByIssueIds[] = $issueRelation;

        return $this;
    }

    /**
     * Remove IssueRelation entity related by `issue_id` from collection (one to many).
     *
     * @param \Bap\Bundle\IssueBundle\Entity\IssueRelation $issueRelation
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function removeIssueRelationRelatedByIssueId(IssueRelation $issueRelation)
    {
        $this->issueRelationRelatedByIssueIds->removeElement($issueRelation);

        return $this;
    }

    /**
     * Get IssueRelation entity related by `issue_id` collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getIssueRelationRelatedByIssueIds()
    {
        return $this->issueRelationRelatedByIssueIds;
    }

    /**
     * Add IssueRelation entity related by `related_issue_id` to collection (one to many).
     *
     * @param \Bap\Bundle\IssueBundle\Entity\IssueRelation $issueRelation
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function addIssueRelationRelatedByRelatedIssueId(IssueRelation $issueRelation)
    {
        $this->issueRelationRelatedByRelatedIssueIds[] = $issueRelation;

        return $this;
    }

    /**
     * Remove IssueRelation entity related by `related_issue_id` from collection (one to many).
     *
     * @param \Bap\Bundle\IssueBundle\Entity\IssueRelation $issueRelation
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function removeIssueRelationRelatedByRelatedIssueId(IssueRelation $issueRelation)
    {
        $this->issueRelationRelatedByRelatedIssueIds->removeElement($issueRelation);

        return $this;
    }

    /**
     * Get IssueRelation entity related by `related_issue_id` collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getIssueRelationRelatedByRelatedIssueIds()
    {
        return $this->issueRelationRelatedByRelatedIssueIds;
    }

    /**
     * Set IssueType entity (many to one).
     *
     * @param \Bap\Bundle\IssueBundle\Entity\IssueType $issueType
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function setIssueType(IssueType $issueType = null)
    {
        $this->issueType = $issueType;

        return $this;
    }

    /**
     * Get IssueType entity (many to one).
     *
     * @return \Bap\Bundle\IssueBundle\Entity\IssueType
     */
    public function getIssueType()
    {
        return $this->issueType;
    }

    /**
     * Set IssuePriority entity (many to one).
     *
     * @param \Bap\Bundle\IssueBundle\Entity\IssuePriority $issuePriority
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function setIssuePriority(IssuePriority $issuePriority = null)
    {
        $this->issuePriority = $issuePriority;

        return $this;
    }

    /**
     * Get IssuePriority entity (many to one).
     *
     * @return \Bap\Bundle\IssueBundle\Entity\IssuePriority
     */
    public function getIssuePriority()
    {
        return $this->issuePriority;
    }

    /**
     * Set IssueResolution entity (many to one).
     *
     * @param \Bap\Bundle\IssueBundle\Entity\IssueResolution $issueResolution
     * @return \Bap\Bundle\IssueBundle\Entity\Issue
     */
    public function setIssueRelsolution(IssueResolution $issueResolution = null)
    {
        $this->issueResolution = $issueResolution;

        return $this;
    }

    /**
     * Get IssueResolution entity (many to one).
     *
     * @return \Bap\Bundle\IssueBundle\Entity\IssueResolution
     */
    public function getIssueRelsolution()
    {
        return $this->issueResolution;
    }

    public function __sleep()
    {
        return array('id', 'parent_id', 'reporter_id', 'assignee_id', 'tags_id', 'code', 'status', 'type', 'summary', 'description', 'priority', 'resolution', 'created_at', 'updated_at');
    }
}